#!/usr/bin/python

import ram.context
import ram.widgets


with ram.context(__name__):
    from wiz.entry import RunDictIndex
    from net.utils import ValidateEmptyOrIpV4

    from ..resolver.entry import ModifyPeerDnsDevice
    from ..resolver.entry import RemovePeerDnsDevice

    from ..resolver.utils import CheckPeerDnsDevice

    from ..routing.entry import ModifyGatewayDevice
    from ..routing.entry import RemoveGatewayDevice
    from ..routing.entry import EditGatewayAddress

    from ..routing.utils import CheckGatewayDevice
    from ..routing.utils import ShownGatewayIpAddr


def EditIfaceIpAddressAndNetwork(config, ifname):
    ifconf = config['ifconfig'][ifname]

    if ifconf['usedhcp'] and not ram.widgets.AskViaButtons(
        "Use static configuration?",
        "Interface `%s` is configured to obtain network parameters via DHCP protocol.\n\n"
        "Would you like to use static configuration?\n" % ifname
    ):
        return

    ip_addr, netmask = ram.widgets.RunEntry(
        "Interface IP configuration",
        "Specify IP address and netmask for the interface `%s`." % ifname,
        [
            ("Address", ifconf['ip_addr'], ValidateEmptyOrIpV4),
            ("Netmask", ifconf['netmask'], ValidateEmptyOrIpV4),
        ],
    )

    ifconf['usedhcp'] = ""
    ifconf['ip_addr'] = ip_addr
    ifconf['netmask'] = netmask


def EditNetworkIface(config, ifname):
    ifconf = config['ifconfig'][ifname]
    backup_peerdns = config['resolver']['peerdns']
    backup_default = config['routing']['default']

    def __SwitchIfaceEnabled():
        ifconf['enabled'] = "" if ifconf['enabled'] else "_"

    def __SwitchIfaceUseDhcp():
        if not ifconf['usedhcp']:
            ifconf['usedhcp'] = "_"
        elif ifconf['ip_addr'] and ifconf['netmask']:
            ifconf['usedhcp'] = ""
        else:
            EditIfaceIpAddressAndNetwork(config, ifname)

    def __EditIfaceIpAddress():
        EditIfaceIpAddressAndNetwork(config, ifname)

    def __EditIfaceIpNetwork():
        EditIfaceIpAddressAndNetwork(config, ifname)

    def __SwitchIfaceDefconf():
        if ifconf['hw_addr']:
            if not ram.widgets.AskViaButtons(
                "Reset interface `%s`?" % ifname,
                "Would you like to reset interface `%s`?" % ifname,
            ):
                return
        else:
            if not ram.widgets.AskViaButtons(
                "Delete interface `%s`?" % ifname,
                "Would you like to delete interface `%s`?" % ifname,
            ):
                return

        DelNetworkIfaceNow(config, ifname)
        return ifname

    def __SwitchIfacePeerDns():
        if not config['resolver']['peerdns'] == ifname:
            ModifyPeerDnsDevice(config, ifname)
        elif backup_peerdns and backup_peerdns != ifname:
            ModifyPeerDnsDevice(config, backup_peerdns)
        else:
            RemovePeerDnsDevice(config)

    def __SwitchIfaceDefault():
        if not config['routing']['default'] == ifname:
            ModifyGatewayDevice(config, ifname)
        elif backup_default and backup_default != ifname:
            ModifyGatewayDevice(config, backup_default)
        else:
            RemoveGatewayDevice(config)

    def __EditIfaceIpGateway():
        EditGatewayAddress(config, ifname)

    def __MkEditNetworkIface():
        devname = ifconf['hw_addr'] or "*** NOT FOUND ***"
        enabled = "yes" if ifconf['enabled'] else "no"
        usedhcp = "yes" if ifconf['usedhcp'] else "no"
        ip_addr = "dhcp" if ifconf['usedhcp'] else ifconf['ip_addr']
        netmask = "dhcp" if ifconf['usedhcp'] else ifconf['netmask']

        if config['resolver']['peerdns'] == ifname:
            iserror, warning = CheckPeerDnsDevice(ifconf)
            peerdns = "yes" + (" *" if warning else "")
        else:
            peerdns = "no"

        if config['routing']['default'] == ifname:
            iserror, warning = CheckGatewayDevice(ifconf)
            default = "yes" + (" *" if warning else "")
        else:
            default = "no"

        gateway = ShownGatewayIpAddr(ifconf)

        return [
            ("%-16s %-16s" % ("HW addr:", devname), 0),
            ("", 1),
            ("%-16s %s" % ("Enabled:", enabled), __SwitchIfaceEnabled),
            ("%-16s %s" % ("Use DHCP:", usedhcp), __SwitchIfaceUseDhcp),
            ("", 2),
            ("%-16s %-15s" % ("IP addr:", ip_addr), __EditIfaceIpAddress),
            ("%-16s %-15s" % ("Netmask:", netmask), __EditIfaceIpNetwork),
            ("%-16s %-15s" % ("Gateway:", gateway), __EditIfaceIpGateway),
            ("", 3),
            ("%-16s %s" % ("Default route:", default), __SwitchIfaceDefault),
            ("", 4),
            ("%-16s %s" % ("Use DHCP DNS:", peerdns), __SwitchIfacePeerDns),
            ("", 5),
            ("Reset configuration ..." if ifconf['hw_addr'] else "Delete configuration ...", __SwitchIfaceDefconf),
        ]

    return ram.widgets.RunMenu("Select Action - %s" % ifname, __MkEditNetworkIface)


def AddNetworkIfaceNow(config, ifname):
    ifconf = config['ifconfig'][ifname]

    ifconf['defconf'] = ""
    ifconf['enabled'] = "_"
    ifconf['usedhcp'] = "_"

    if not config['routing']['default']:
        config['routing']['default'] = ifname

    if not config['resolver']['peerdns'] and (
        not config['resolver']['pri_dns'] and
        not config['resolver']['sec_dns']
    ):
        config['resolver']['peerdns'] = ifname


def AddNetworkIface(config, ifname):
    if ram.widgets.AskViaButtons(
        "Unconfigured interface `%s`" % ifname,
        "Interface `%s` is found but not configured.\n\n"
        "Would you like to initialize it now?" % ifname
    ):
        AddNetworkIfaceNow(config, ifname)
        EditNetworkIface(config, ifname)


def DelNetworkIfaceNow(config, ifname):
    ifconf = config['ifconfig'][ifname]

    ifconf['defconf'] = "_"
    ifconf['enabled'] = ""
    ifconf['usedhcp'] = ""

    if config['routing']['default'] == ifname:
        config['routing']['default'] = ""

    if config['resolver']['peerdns'] == ifname:
        config['resolver']['peerdns'] = ""


def DelNetworkIface(config, ifname):
    if ram.widgets.AskViaButtons(
        "Missing interface `%s`" % ifname,
        "Interface `%s` is configured but not found.\n\n"
        "Would you like to delete it permanently?" % ifname
    ):
        DelNetworkIfaceNow(config, ifname)
    else:
        EditNetworkIface(config, ifname)


def ActNetworkIface(config, ifname):
    ifconf = config['ifconfig'][ifname]

    if not ifconf:
        ram.widgets.ShowError(ifname, "ERROR: Device is not configured!")
    elif not ifconf['hw_addr']:
        DelNetworkIface(config, ifname)
    elif ifconf['defconf']:
        AddNetworkIface(config, ifname)
    else:
        EditNetworkIface(config, ifname)


if __name__ == '__main__':
    params = ram.param()
    config = ram.query('net.network')

    if not params.device:
        def __FormatIfEntry(ifname):
            ifconf = config['ifconfig'][ifname]

            if ifconf['hw_addr'] and ifconf['defconf']:
                status = " new ... "
            else:
                status = "<  %03s  >" % ("on" if ifconf['enabled'] else "off")

            return "%-6s %-18s: %-9s" % (
                ifname, ifconf['hw_addr'] or "*** NOT FOUND ***", status
            )

        def __FilterIfEntry(ifname):
            ifconf = config['ifconfig'][ifname]

            return ifconf['hw_addr'] or not ifconf['defconf']

        def __ModifyIfEntry(ifname):
            ActNetworkIface(config, ifname)

        def __SwitchIfEntry(ifname):
            ifconf = config['ifconfig'][ifname]

            if not ifconf['defconf']:
                ifconf['enabled'] = "" if ifconf['enabled'] else "_"

        while config:
            RunDictIndex(
                "Select Action - Interfaces",
                "", "",
                values_fn=lambda: sorted(config['ifconfig']),
                format_fn=__FormatIfEntry,
                filter_fn=__FilterIfEntry,
                modify_fn=__ModifyIfEntry,
                switch_fn=__SwitchIfEntry,
                itemExit=params.wizard
            )

            if not params.wizard or any(
                config['ifconfig'][_]['enabled'] for _ in config['ifconfig']
            ) or ram.widgets.AskViaButtons(
                "Network unconfigured",
                "No enabled network interfaces found!\n\n"
                "Would you like to continue?\n"
            ):
                break
        else:
            if params.wizard:
                if not ram.widgets.AskViaButtons(
                    "Network unconfigured",
                    "No present network interfaces found!\n\n"
                    "Would you like to continue?\n"
                ):
                    raise SystemExit("No suitable device found on the machine.")
            else:
                ram.widgets.ShowMessage(
                    "Network unconfigured",
                    "No present network interfaces found!\n"
                )

    elif not params.device == "no":
        ActNetworkIface(config, params.device)

    ram.store('net.network', input=config)
